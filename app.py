import os
import telebot
from flask import Flask, request, jsonify
import json
import requests
import time
import base64
import ssl

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
GIGACHAT_API_KEY = os.environ.get('GIGACHAT_API_KEY')
APP_URL = "https://telegram-bot-x6zm.onrender.com"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
CERT_PATH = os.getenv("CERT_PATH", "./cert.pem")
CERT_URL = os.getenv("CERT_URL")
GIGACHAT_AUTH = os.getenv("GIGACHAT_AUTH")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"üß† GigaChat: {'‚úÖ' if GIGACHAT_API_KEY else '‚ùå'}")
print(f"üìú CERT_PATH: {CERT_PATH}")
print(f"üîó CERT_URL: {'‚úÖ' if CERT_URL else '‚ùå'}")
print(f"üîê GIGACHAT_AUTH: {'‚úÖ' if GIGACHAT_AUTH else '‚ùå'}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫
try:
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=f"{APP_URL}/webhook")
    print(f"‚úÖ –í–µ–±-—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_URL}/webhook")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Ö—É–∫–∞: {e}")

# –ö–õ–ê–°–° GIGACHAT LITE –° –ü–û–î–î–ï–†–ñ–ö–û–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢–û–í
class GigaChatBot:
    def __init__(self):
        self.api_key = GIGACHAT_API_KEY or GIGACHAT_AUTH
        self.is_configured = bool(self.api_key)
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.cert_path = CERT_PATH
        self.cert_url = CERT_URL
        
    def _get_ssl_context(self):
        """–°–æ–∑–¥–∞–µ—Ç SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"""
        try:
            context = ssl.create_default_context()
            
            # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É
            if os.path.exists(self.cert_path):
                context.load_verify_locations(self.cert_path)
                print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω: {self.cert_path}")
            elif self.cert_url:
                # –°–∫–∞—á–∏–≤–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ URL
                try:
                    response = requests.get(self.cert_url, timeout=10)
                    with open('/tmp/cert.pem', 'wb') as f:
                        f.write(response.content)
                    context.load_verify_locations('/tmp/cert.pem')
                    print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ URL: {self.cert_url}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            
            return context
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def _make_secure_request(self, method, url, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"""
        try:
            ssl_context = self._get_ssl_context()
            if ssl_context:
                kwargs['verify'] = self.cert_path if os.path.exists(self.cert_path) else True
            else:
                # –ï—Å–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
                kwargs['verify'] = False
                print("‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ SSL –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            
            response = requests.request(method, url, **kwargs)
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
            try:
                kwargs['verify'] = False
                response = requests.request(method, url, **kwargs)
                print("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL")
                return response
            except Exception as e2:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e2}")
                raise
    
    def get_auth_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è GigaChat Lite"""
        try:
            if not self.api_key:
                print("‚ùå API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return None
                
            print(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: {self.api_key[:10]}...")
            
            # –ú–ï–¢–û–î 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º GIGACHAT_AUTH –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            if GIGACHAT_AUTH and len(GIGACHAT_AUTH) > 100:
                print("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º GIGACHAT_AUTH –∫–∞–∫ —Ç–æ–∫–µ–Ω")
                return GIGACHAT_AUTH
            
            # –ú–ï–¢–û–î 2: Basic Auth
            url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if ":" in self.api_key:
                login, password = self.api_key.split(":", 1)
            else:
                login = password = self.api_key
            
            auth_string = f"{login}:{password}"
            auth_base64 = base64.b64encode(auth_string.encode()).decode()
            
            headers = {
                'Authorization': f'Basic {auth_base64}',
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json'
            }
            
            data = {
                'scope': 'GIGACHAT_API_PERS'
            }
            
            print("üîê –ü—Ä–æ–±—É–µ–º Basic Auth —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏...")
            
            response = self._make_secure_request(
                'POST', 
                url, 
                headers=headers, 
                data=data, 
                timeout=30
            )
            
            print(f"üîê –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            
            if response.status_code == 200:
                token_data = response.json()
                access_token = token_data.get('access_token')
                if access_token:
                    print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
                    return access_token
                else:
                    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                print(f"üîê –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text}")
                
                # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π scope
                if response.status_code == 400:
                    print("üîê –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π scope...")
                    data['scope'] = 'GIGACHAT'
                    
                    response = self._make_secure_request(
                        'POST', 
                        url, 
                        headers=headers, 
                        data=data, 
                        timeout=30
                    )
                    
                    if response.status_code == 200:
                        token_data = response.json()
                        access_token = token_data.get('access_token')
                        if access_token:
                            print("‚úÖ –¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º scope")
                            return access_token
            
            return None
                
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            import traceback
            traceback.print_exc()
            return None
    
    def get_response(self, user_message):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GigaChat Lite"""
        if not self.is_configured:
            return "‚ùå GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ GIGACHAT_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render."
        
        try:
            auth_token = self.get_auth_token()
                
            if not auth_token:
                error_msg = """
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ GigaChat. 

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –≤ GIGACHAT_API_KEY
2. –ö–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ SberBank AI
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π scope

–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å GIGACHAT_API_KEY –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø –∫ GigaChat API
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GIGACHAT_AUTH –¥–ª—è –ø—Ä—è–º–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developers.sber.ru/studio/auth
2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –°–±–µ—ÄID
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4. –ü–æ–ª—É—á–∏—Ç–µ Client ID –∏ Client Secret
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ClientID:ClientSecret
"""
                return error_msg
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ –ø–æ–¥—Ä–æ–±–Ω–æ –ø–æ —Ç–µ–º–∞–º:
- –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤—É–∑—ã (–ú–ì–ò–ú–û, –ú–ì–£, –°–ü–±–ì–£ –∏ –¥—Ä.)
- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
- –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞"""

            url = f"{self.base_url}/chat/completions"
            headers = {
                'Authorization': f'Bearer {auth_token}',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
            
            data = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user", 
                        "content": user_message
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 1500
            }
            
            print(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat...")
            
            response = self._make_secure_request(
                'POST', 
                url, 
                headers=headers, 
                json=data, 
                timeout=30
            )
            
            print(f"üß† –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GigaChat: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                chat_response = result['choices'][0]['message']['content']
                print(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω: {len(chat_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                return chat_response
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GigaChat. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
            elif response.status_code == 403:
                print("‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return "‚ùå –î–æ—Å—Ç—É–ø –∫ GigaChat –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ API –∫–ª—é—á–∞."
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {response.status_code} - {response.text}")
                return f"‚ùå –û—à–∏–±–∫–∞ GigaChat API ({response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ GigaChat: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ GigaChat: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º GigaChat
gigachat = GigaChatBot()

# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ß–ï–†–ï–ó API TELEGRAM
def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        max_length = 4000
        if len(text) > max_length:
            parts = []
            while text:
                if len(text) <= max_length:
                    parts.append(text)
                    break
                else:
                    split_pos = text.rfind('\n', 0, max_length)
                    if split_pos == -1:
                        split_pos = text.rfind('. ', 0, max_length)
                    if split_pos == -1:
                        split_pos = text.rfind(' ', 0, max_length)
                    if split_pos == -1:
                        split_pos = max_length
                    
                    parts.append(text[:split_pos])
                    text = text[split_pos:].lstrip()
            
            for i, part in enumerate(parts):
                part_text = f"{part}\n\n({i+1}/{len(parts)})"
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": part_text,
                    "parse_mode": "HTML"
                }
                response = requests.post(url, json=data, timeout=10)
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {response.text}")
                time.sleep(0.5)
            return True
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, json=data, timeout=10)
            success = response.status_code == 200
            if not success:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
            return success
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

# –í–ï–ë-–•–£–ö –° –†–£–ß–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.content_type != 'application/json':
            return "Invalid content-type", 400
            
        json_data = request.get_json()
        if not json_data:
            return "Empty JSON", 400
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω webhook")
        
        if 'message' in json_data:
            message = json_data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {chat_id} -> {text}")
            
            if text == '/start':
                welcome_text = """
üåç –ë–û–¢ –ü–û –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ú –û–¢–ù–û–®–ï–ù–ò–Ø–ú –° GIGACHAT

üéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
‚Ä¢ –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –≤—É–∑—ã (–ú–ì–ò–ú–û, –ú–ì–£, –°–ü–±–ì–£)
‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
‚Ä¢ –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞

üí° –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö!

–ü—Ä–∏–º–µ—Ä—ã:
"–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω—ã –¥–ª—è –ú–ì–ò–ú–û?"
"–ß—Ç–æ —Ç–∞–∫–æ–µ –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç?"
"–ì–¥–µ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?"

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!
"""
                send_telegram_message(chat_id, welcome_text)
            
            elif text == '/status':
                status_text = f"""
üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:

ü§ñ –ë–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üß† GigaChat: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if gigachat.is_configured else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {'‚úÖ' if os.path.exists(CERT_PATH) or CERT_URL else '‚ùå'}
üåê –í–µ–±-—Ö—É–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç

üí¨ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat...
"""
                send_telegram_message(chat_id, status_text)
                
                # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                test_response = gigachat.get_response("–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ?")
                status_text += f"\nüîß –¢–µ—Å—Ç GigaChat: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if '–û—à–∏–±–∫–∞' not in test_response else '‚ùå –û—à–∏–±–∫–∞'}"
                send_telegram_message(chat_id, status_text)
            
            elif text and not text.startswith('/'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
                try:
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendChatAction"
                    data = {"chat_id": chat_id, "action": "typing"}
                    requests.post(url, json=data, timeout=5)
                except:
                    pass
                
                print(f"üß† –ó–∞–ø—Ä–æ—Å –∫ GigaChat: {text}")
                giga_response = gigachat.get_response(text)
                send_telegram_message(chat_id, giga_response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {chat_id}")
            
            else:
                print(f"‚ö†Ô∏è  –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        return "OK", 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        traceback.print_exc()
        return "Error", 500

# –¢–µ—Å—Ç GigaChat
@app.route('/test_gigachat')
def test_gigachat():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat"""
    test_message = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?"
    try:
        response = gigachat.get_response(test_message)
        return jsonify({
            "status": "success",
            "gigachat_configured": gigachat.is_configured,
            "certificate_configured": bool(os.path.exists(CERT_PATH) or CERT_URL),
            "test_message": test_message,
            "response": response,
            "response_length": len(response) if response else 0
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e)
        })

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return """
    <h1>üåç –ë–æ—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å GigaChat</h1>
    <p><strong>Status:</strong> ‚úÖ Active</p>
    <p><strong>SSL Certificates:</strong> {}</p>
    <p><strong>GigaChat:</strong> {}</p>
    
    <h3>–¢–µ—Å—Ç—ã:</h3>
    <ul>
        <li><a href="/test_gigachat">–¢–µ—Å—Ç GigaChat</a></li>
        <li><a href="/status">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</a></li>
    </ul>
    
    <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram!</p>
    """.format(
        '‚úÖ Configured' if os.path.exists(CERT_PATH) or CERT_URL else '‚ùå Not configured',
        '‚úÖ Configured' if gigachat.is_configured else '‚ùå Not configured'
    )

@app.route('/status')
def status():
    return jsonify({
        "bot_status": "active",
        "gigachat_configured": gigachat.is_configured,
        "certificate_configured": bool(os.path.exists(CERT_PATH) or CERT_URL),
        "webhook_set": True
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîê GigaChat: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if gigachat.is_configured else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if os.path.exists(CERT_PATH) or CERT_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if gigachat.is_configured:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat...")
        try:
            test_response = gigachat.get_response("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            print(f"‚úÖ GigaChat —Ç–µ—Å—Ç: {'–£—Å–ø–µ—à–Ω–æ' if '–û—à–∏–±–∫–∞' not in test_response else '–û—à–∏–±–∫–∞'}")
        except Exception as e:
            print(f"‚ùå GigaChat —Ç–µ—Å—Ç: {e}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
