import os
import requests
import json
from flask import Flask, request
import telebot

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
APP_URL = "https://your-app-name.onrender.com"  # –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à URL
GIGACHAT_API_KEY = os.environ.get('GIGACHAT_API_KEY')  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ Render

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

class GigaChatAPI:
    def __init__(self, client_secret):
        self.client_secret = client_secret
        self.access_token = None
        self.get_access_token()
    
    def get_access_token(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GigaChat API"""
        try:
            url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'application/json',
                'RqUID': '6f0b1291-c7f3-43c6-bb2e-9f3efb2dc98e',  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π
            }
            data = {
                'scope': 'GIGACHAT_API_PERS'
            }
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ client credentials
            auth = ('client', 'client')  # –ë–∞–∑–æ–≤—ã–µ –∫—Ä–µ–¥–µ–Ω—à–∏–ª—ã, –º–æ–≥—É—Ç –º–µ–Ω—è—Ç—å—Å—è
            response = requests.post(
                url, 
                headers=headers, 
                data=data, 
                auth=auth,
                verify=False  # –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å SSL
            )
            
            if response.status_code == 200:
                self.access_token = response.json().get('access_token')
                return True
            else:
                print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
    
    def send_message(self, message_text):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ GigaChat –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        if not self.access_token:
            if not self.get_access_token():
                return "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ GigaChat API"
        
        try:
            url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {self.access_token}'
            }
            
            data = {
                "model": "GigaChat",  # –∏–ª–∏ "GigaChat-Plus" –¥–ª—è –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –º–æ–¥–µ–ª–∏
                "messages": [
                    {
                        "role": "user",
                        "content": message_text
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 1024
            }
            
            response = requests.post(url, headers=headers, json=data, verify=False)
            
            if response.status_code == 200:
                result = response.json()
                return result['choices'][0]['message']['content']
            elif response.status_code == 401:
                # –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
                self.get_access_token()
                return self.send_message(message_text)
            else:
                return f"–û—à–∏–±–∫–∞ API GigaChat: {response.status_code} - {response.text}"
                
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GigaChat (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω API –∫–ª—é—á)
gigachat = None
if GIGACHAT_API_KEY:
    gigachat = GigaChatAPI(GIGACHAT_API_KEY)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GigaChat.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/giga [—Ç–µ–∫—Å—Ç] - –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ GigaChat
/help - –ø–æ–º–æ—â—å
    """
    bot.reply_to(message, welcome_text)

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = """
üìñ –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:

‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç —á–µ—Ä–µ–∑ GigaChat
‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /giga [–≤–∞—à –≤–æ–ø—Ä–æ—Å]

–ü—Ä–∏–º–µ—Ä:
/giga –ù–∞–ø–∏—à–∏ –∫–æ–¥ Python –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GigaChat –æ—Ç –°–±–µ—Ä–∞.
    """
    bot.reply_to(message, help_text)

@bot.message_handler(commands=['giga'])
def giga_chat_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /giga"""
    if not gigachat:
        bot.reply_to(message, "‚ùå GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    command_text = message.text.split(' ', 1)
    if len(command_text) < 2:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /giga")
        return
    
    user_message = command_text[1]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å GigaChat...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
    response = gigachat.send_message(user_message)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
    if len(response) > 4000:
        for i in range(0, len(response), 4000):
            bot.edit_message_text(
                response[i:i+4000], 
                message.chat.id, 
                processing_msg.message_id
            )
    else:
        bot.edit_message_text(
            response, 
            message.chat.id, 
            processing_msg.message_id
        )

@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not gigachat:
        bot.reply_to(message, "‚ùå GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ —Å–ª–µ—à–∞
    if message.text.startswith('/'):
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
    processing_msg = bot.reply_to(message, "üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç GigaChat
    response = gigachat.send_message(message.text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    if len(response) > 4000:
        for i in range(0, len(response), 4000):
            if i == 0:
                bot.edit_message_text(
                    response[i:i+4000], 
                    message.chat.id, 
                    processing_msg.message_id
                )
            else:
                bot.send_message(message.chat.id, response[i:i+4000])
    else:
        bot.edit_message_text(
            response, 
            message.chat.id, 
            processing_msg.message_id
        )

# –í–µ–±-—Ö—É–∫ –¥–ª—è Render
@app.route('/' + BOT_TOKEN, methods=['POST'])
def get_message():
    json_string = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_string)
    bot.process_new_updates([update])
    return "!", 200

@app.route("/")
def webhook():
    bot.remove_webhook()
    bot.set_webhook(url=APP_URL + '/' + BOT_TOKEN)
    
    status = "‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!"
    if not gigachat:
        status += " ‚ùå GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    else:
        status += " ‚úÖ GigaChat –ø–æ–¥–∫–ª—é—á–µ–Ω"
    
    return status

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
