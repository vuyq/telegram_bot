import os
import requests
import urllib3
from flask import Flask, request
import telebot

# –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
GIGACHAT_API_KEY = os.environ.get('GIGACHAT_API_KEY')

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ URL
RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    APP_URL = f"https://{RENDER_EXTERNAL_HOSTNAME}"
else:
    APP_URL = None  # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

print("=" * 50)
print("ü§ñ BOT STARTED")
print(f"üîë BOT_TOKEN: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"üß† GIGACHAT: {'‚úÖ' if GIGACHAT_API_KEY else '‚ùå'}")
print(f"üåê RENDER_HOSTNAME: {RENDER_EXTERNAL_HOSTNAME}")
print("=" * 50)

# –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    print(f"üì® Received /start from {message.chat.id}")
    bot.reply_to(message, "üéâ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ü—Ä–∏–≤–µ—Ç –æ—Ç Render!")

@bot.message_handler(commands=['test'])
def test_command(message):
    bot.reply_to(message, "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç!")

@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, f"–≠—Ö–æ: {message.text}")

# –í–µ–±-—Ö—É–∫
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        json_data = request.get_json()
        update = telebot.types.Update.de_json(json_data)
        bot.process_new_updates([update])
        return "OK", 200
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return "Error", 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±-—Ö—É–∫–∞
@app.route("/")
def index():
    if not APP_URL:
        return """
        <h1>‚ùå APP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω</h1>
        <p>–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–¥ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π URL –∏–∑ Render</p>
        <p>–¢–µ–∫—É—â–∏–π RENDER_EXTERNAL_HOSTNAME: {}</p>
        """.format(RENDER_EXTERNAL_HOSTNAME)
    
    try:
        # –ü—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±-—Ö—É–∫
        bot.remove_webhook()
        webhook_url = f"{APP_URL}/webhook"
        success = bot.set_webhook(url=webhook_url)
        
        return f"""
        <h1>ü§ñ Telegram Bot</h1>
        <p><strong>Status:</strong> ‚úÖ Active</p>
        <p><strong>URL:</strong> {APP_URL}</p>
        <p><strong>Webhook:</strong> {webhook_url}</p>
        <p><strong>SetWebhook:</strong> {'‚úÖ Success' if success else '‚ùå Failed'}</p>
        <hr>
        <h3>üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <p>1. –£—Å—Ç–∞–Ω–æ–≤–∏ –≤–µ–±-—Ö—É–∫ –≤ BotFather:</p>
        <code>/setwebhook {webhook_url}</code>
        <p>2. –ü—Ä–æ–≤–µ—Ä—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start</p>
        """
    except Exception as e:
        return f"‚ùå Error: {str(e)}"

# –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Ö—É–∫–∞
@app.route("/set_webhook")
def set_webhook_manual():
    if not APP_URL:
        return "APP_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
    
    bot.remove_webhook()
    webhook_url = f"{APP_URL}/webhook"
    success = bot.set_webhook(url=webhook_url)
    
    return f"""
    Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {success}
    <br>URL: {webhook_url}
    <br><a href="/">–ù–∞–∑–∞–¥</a>
    """

@app.route("/get_webhook_info")
def get_webhook_info():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ–±-—Ö—É–∫–∞"""
    try:
        info = bot.get_webhook_info()
        return {
            "url": info.url,
            "has_custom_certificate": info.has_custom_certificate,
            "pending_update_count": info.pending_update_count,
            "last_error_date": info.last_error_date,
            "last_error_message": info.last_error_message
        }
    except Exception as e:
        return {"error": str(e)}

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 10000))
    print(f"üöÄ Starting on port {port}")
    app.run(host="0.0.0.0", port=port)
