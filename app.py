import os
import telebot
from flask import Flask, request, jsonify
import json
import requests
import time
import base64
import ssl
from pathlib import Path
import uuid
from tenacity import retry, stop_after_attempt, wait_exponential

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
GIGACHAT_AUTH = os.environ.get('GIGACHAT_AUTH')
APP_URL = "https://telegram-bot-x6zm.onrender.com"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
CERT_PATH = os.getenv("CERT_PATH", "./cert.pem")
CERT_URL = os.getenv("CERT_URL")

bot = telebot.TeleBot(BOT_TOKEN)
app = Flask(__name__)

print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
print(f"üîë –¢–æ–∫–µ–Ω: {'‚úÖ' if BOT_TOKEN else '‚ùå'}")
print(f"üß† GigaChat Auth: {'‚úÖ' if GIGACHAT_AUTH else '‚ùå'}")
print(f"üìú CERT_PATH: {CERT_PATH}")
print(f"üîó CERT_URL: {'‚úÖ' if CERT_URL else '‚ùå'}")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±-—Ö—É–∫
try:
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=f"{APP_URL}/webhook")
    print(f"‚úÖ –í–µ–±-—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {APP_URL}/webhook")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-—Ö—É–∫–∞: {e}")

class Config:
    MAX_RETRIES = 3
    REQUEST_TIMEOUT = 30
    CERT_PATH = CERT_PATH
    CERT_URL = CERT_URL
    GIGACHAT_AUTH = GIGACHAT_AUTH

def download_certificate():
    """–ó–∞–≥—Ä—É–∑–∫–∞ SSL-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""
    if Config.CERT_URL and not Path(Config.CERT_PATH).exists():
        try:
            response = requests.get(Config.CERT_URL, timeout=Config.REQUEST_TIMEOUT)
            response.raise_for_status()
            with open(Config.CERT_PATH, "wb") as f:
                f.write(response.content)
            print("‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
            raise

@retry(stop=stop_after_attempt(Config.MAX_RETRIES), 
      wait=wait_exponential(multiplier=1, min=2, max=10))
def get_gigachat_token() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ GigaChat"""
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': str(uuid.uuid4()),
        'Authorization': f'Basic {Config.GIGACHAT_AUTH}'
    }
    payload = {'scope': 'GIGACHAT_API_PERS'}
    
    try:
        verify_ssl = Config.CERT_PATH if Path(Config.CERT_PATH).exists() else False
        print(f"üîê –ò—Å–ø–æ–ª—å–∑—É–µ–º SSL –ø—Ä–æ–≤–µ—Ä–∫—É: {verify_ssl}")
        
        response = requests.post(
            url, 
            headers=headers, 
            data=payload, 
            verify=verify_ssl,
            timeout=Config.REQUEST_TIMEOUT
        )
        
        print(f"üîê –°—Ç–∞—Ç—É—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
        
        if response.status_code == 200:
            token_data = response.json()
            access_token = token_data.get("access_token")
            if access_token:
                print("‚úÖ –¢–æ–∫–µ–Ω GigaChat –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return access_token
            else:
                print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code} - {response.text}")
            
        raise Exception(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
        
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
        raise

# –ö–õ–ê–°–° GIGACHAT –° –ü–†–ê–í–ò–õ–¨–ù–û–ô –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ï–ô
class GigaChatBot:
    def __init__(self):
        self.is_configured = bool(GIGACHAT_AUTH)
        self.base_url = "https://gigachat.devices.sberbank.ru/api/v1"
        self.access_token = None
        self.token_expires = 0
        
    def get_auth_token(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è GigaChat"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
            if self.access_token and time.time() < self.token_expires:
                return self.access_token
                
            print("üîê –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω GigaChat...")
            self.access_token = get_gigachat_token()
            # –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤—É–µ—Ç 30 –º–∏–Ω—É—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –Ω–∞ 25 –º–∏–Ω—É—Ç
            self.token_expires = time.time() + 1500
            return self.access_token
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def _make_secure_request(self, method, url, **kwargs):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏"""
        try:
            verify_ssl = Config.CERT_PATH if Path(Config.CERT_PATH).exists() else False
            kwargs['verify'] = verify_ssl
            kwargs['timeout'] = Config.REQUEST_TIMEOUT
            
            response = requests.request(method, url, **kwargs)
            return response
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL
            try:
                kwargs['verify'] = False
                response = requests.request(method, url, **kwargs)
                print("‚ö†Ô∏è  –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL")
                return response
            except Exception as e2:
                print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e2}")
                raise
    
    def get_response(self, user_message):
        """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç GigaChat"""
        if not self.is_configured:
            return "‚ùå GigaChat –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ GIGACHAT_AUTH –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render."
        
        try:
            auth_token = self.get_auth_token()
            if not auth_token:
                error_msg = """
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ GigaChat. 

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –ù–µ–≤–µ—Ä–Ω—ã–π GIGACHAT_AUTH –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Render
2. –ö–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ SberBank AI
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏

üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è GIGACHAT_AUTH:
1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://developers.sber.ru/studio/auth
2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –°–±–µ—ÄID
3. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4. –ü–æ–ª—É—á–∏—Ç–µ Client ID –∏ Client Secret
5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64(ClientID:ClientSecret)
"""
                return error_msg
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö
            system_prompt = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π. –¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç:

üéì **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ:**
- –í—É–∑—ã –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π (–ú–ì–ò–ú–û, –ú–ì–£, –°–ü–±–ì–£, –í–®–≠, –†–£–î–ù)
- –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —ç–∫–∑–∞–º–µ–Ω—ã –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- –ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏

üìö **–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–Ω—è—Ç–∏—è:**
- –î–∏–ø–ª–æ–º–∞—Ç–∏—è –∏ –≤–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–µ –ø—Ä–∞–≤–æ
- –ì–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
- –ì–ª–æ–±–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è

üíº **–ö–∞—Ä—å–µ—Ä–∞:**
- –î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (–û–û–ù, –ù–ê–¢–û, –ï–°, –í–¢–û, –ú–í–§)
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –±–∏–∑–Ω–µ—Å
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –°–ú–ò

üåç **–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã:**
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –¥–æ–≥–æ–≤–æ—Ä—ã –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
- –í–Ω–µ—à–Ω—è—è –ø–æ–ª–∏—Ç–∏–∫–∞ –†–æ—Å—Å–∏–∏ –∏ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω

–û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è."""

            url = f"{self.base_url}/chat/completions"
            headers = {
                'Authorization': f'Bearer {auth_token}',
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
            
            data = {
                "model": "GigaChat",
                "messages": [
                    {
                        "role": "system",
                        "content": system_prompt
                    },
                    {
                        "role": "user", 
                        "content": user_message
                    }
                ],
                "temperature": 0.7,
                "max_tokens": 2000
            }
            
            print(f"üß† –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GigaChat: {user_message[:100]}...")
            
            response = self._make_secure_request('POST', url, headers=headers, json=data)
            
            print(f"üß† –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ GigaChat: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                chat_response = result['choices'][0]['message']['content']
                print(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat –ø–æ–ª—É—á–µ–Ω: {len(chat_response)} —Å–∏–º–≤–æ–ª–æ–≤")
                return chat_response
            elif response.status_code == 401:
                print("‚ùå –û—à–∏–±–∫–∞ 401: –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.access_token = None
                return "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            elif response.status_code == 403:
                print("‚ùå –û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                return "‚ùå –î–æ—Å—Ç—É–ø –∫ GigaChat –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ API –∫–ª—é—á–∞."
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ GigaChat API: {response.status_code} - {response.text}")
                return f"‚ùå –û—à–∏–±–∫–∞ GigaChat API ({response.status_code}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ GigaChat: {e}")
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å GigaChat. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ GigaChat: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏ GigaChat
try:
    download_certificate()
    gigachat = GigaChatBot()
    print("‚úÖ GigaChat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
    gigachat = GigaChatBot()

# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –ß–ï–†–ï–ó API TELEGRAM
def send_telegram_message(chat_id, text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram Bot API"""
    try:
        max_length = 4000
        if len(text) > max_length:
            parts = []
            while text:
                if len(text) <= max_length:
                    parts.append(text)
                    break
                else:
                    split_pos = text.rfind('\n', 0, max_length)
                    if split_pos == -1:
                        split_pos = text.rfind('. ', 0, max_length)
                    if split_pos == -1:
                        split_pos = text.rfind(' ', 0, max_length)
                    if split_pos == -1:
                        split_pos = max_length
                    
                    parts.append(text[:split_pos])
                    text = text[split_pos:].lstrip()
            
            for i, part in enumerate(parts):
                part_text = f"{part}\n\n({i+1}/{len(parts)})"
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
                data = {
                    "chat_id": chat_id,
                    "text": part_text,
                    "parse_mode": "HTML"
                }
                response = requests.post(url, json=data, timeout=10)
                if response.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {response.text}")
                time.sleep(0.5)
            return True
        else:
            url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text,
                "parse_mode": "HTML"
            }
            response = requests.post(url, json=data, timeout=10)
            success = response.status_code == 200
            if not success:
                print(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {response.text}")
            return success
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

# –í–ï–ë-–•–£–ö –° –†–£–ß–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        if request.content_type != 'application/json':
            return "Invalid content-type", 400
            
        json_data = request.get_json()
        if not json_data:
            return "Empty JSON", 400
        
        print(f"üì• –ü–æ–ª—É—á–µ–Ω webhook")
        
        if 'message' in json_data:
            message = json_data['message']
            chat_id = message['chat']['id']
            text = message.get('text', '')
            user_name = message.get('from', {}).get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
            
            print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}: {text}")
            
            if text == '/start':
                welcome_text = f"""
üåç –î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í –ë–û–¢ –ü–û –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–ú –û–¢–ù–û–®–ï–ù–ò–Ø–ú, {user_name}!

üéØ –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö –∏ –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å GigaChat –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã.

üìö –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:
‚Ä¢ üéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º –≤ –≤—É–∑—ã (–ú–ì–ò–ú–û, –ú–ì–£, –°–ü–±–ì–£, –í–®–≠, –†–£–î–ù)
‚Ä¢ üìñ –û—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–Ω—è—Ç–∏—è–º–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
‚Ä¢ üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –≤ —ç—Ç–æ–π —Å—Ñ–µ—Ä–µ
‚Ä¢ üèõÔ∏è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ (–û–û–ù, –ù–ê–¢–û, –ï–°, –í–¢–û)
‚Ä¢ üåê –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≥–µ–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏

üí° –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö, –∏ GigaChat –¥–∞—Å—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!

üìã –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:
"–ö–∞–∫–∏–µ —ç–∫–∑–∞–º–µ–Ω—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ú–ì–ò–ú–û?"
"–û–±—ä—è—Å–Ω–∏ –ø–æ–Ω—è—Ç–∏–µ '–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç'"
"–ì–¥–µ –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å–ª–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?"
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏ —Ñ—É–Ω–∫—Ü–∏—è—Ö –û–û–ù"
"–ö–∞–∫–∏–µ —è–∑—ã–∫–∏ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∏–∫—É?"

üöÄ –ù–∞—á–Ω–∏—Ç–µ —Å –ª—é–±–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞!
"""
                send_telegram_message(chat_id, welcome_text)
                print(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {user_name}")
            
            elif text == '/help':
                help_text = """
‚ùì –ü–û–ú–û–©–¨ –ü–û –ë–û–¢–£ –ú–ï–ñ–î–£–ù–ê–†–û–î–ù–´–• –û–¢–ù–û–®–ï–ù–ò–ô

üéØ –Ø –∏—Å–ø–æ–ª—å–∑—É—é –Ω–µ–π—Ä–æ—Å–µ—Ç—å GigaChat –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ:
‚Ä¢ üéì –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –≤—É–∑—ã –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
‚Ä¢ üìö –¢–µ–æ—Ä–∏–∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π
‚Ä¢ üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º
‚Ä¢ üèõÔ∏è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
‚Ä¢ üåç –°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–µ

üí° –ö–∞–∫ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã:
–ë—É–¥—å—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã - —Ç–∞–∫ GigaChat –¥–∞—Å—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç.

üìã –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:
"–ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ –Ω—É–∂–Ω—ã –¥–ª—è –ú–ì–ò–ú–û –Ω–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?"
"–í —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –¥–∏–ø–ª–æ–º–∞—Ç–∏–µ–π –∏ –≤–Ω–µ—à–Ω–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π?"
"–ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —É –≤—ã–ø—É—Å–∫–Ω–∏–∫–æ–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?"
"–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ä–æ–ª–∏ –û–û–ù –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ"
"–ö–∞–∫ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –≥–µ–æ–ø–æ–ª–∏—Ç–∏–∫–∞ –ø–æ—Å–ª–µ 2022 –≥–æ–¥–∞?"

‚ö° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å - –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GigaChat!

üîÑ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.
"""
                send_telegram_message(chat_id, help_text)
            
            elif text == '/status':
                status_text = f"""
üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:

ü§ñ –ë–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–µ–Ω
üß† GigaChat: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if gigachat.is_configured else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {'‚úÖ' if Path(CERT_PATH).exists() or CERT_URL else '‚ùå'}
üåê –í–µ–±-—Ö—É–∫: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç
üí¨ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}

üí° –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GigaChat...
"""
                send_telegram_message(chat_id, status_text)
                
                # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
                test_response = gigachat.get_response("–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ?")
                status_text = f"üîß –¢–µ—Å—Ç GigaChat: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if '–û—à–∏–±–∫–∞' not in test_response else '‚ùå –û—à–∏–±–∫–∞'}"
                if '–û—à–∏–±–∫–∞' not in test_response:
                    status_text += f"\n\nüìù –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {test_response[:100]}..."
                send_telegram_message(chat_id, status_text)
            
            elif text and not text.startswith('/'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
                try:
                    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendChatAction"
                    data = {"chat_id": chat_id, "action": "typing"}
                    requests.post(url, json=data, timeout=5)
                except:
                    pass
                
                print(f"üß† –ó–∞–ø—Ä–æ—Å –∫ GigaChat –æ—Ç {user_name}: {text}")
                giga_response = gigachat.get_response(text)
                send_telegram_message(chat_id, giga_response)
                print(f"‚úÖ –û—Ç–≤–µ—Ç GigaChat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {user_name}")
            
            else:
                print(f"‚ö†Ô∏è  –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        
        return "OK", 200
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        import traceback
        traceback.print_exc()
        return "Error", 500

# –¢–µ—Å—Ç GigaChat
@app.route('/test_gigachat')
def test_gigachat():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GigaChat"""
    test_message = "–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ: —á—Ç–æ —Ç–∞–∫–æ–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?"
    try:
        response = gigachat.get_response(test_message)
        return jsonify({
            "status": "success",
            "gigachat_configured": gigachat.is_configured,
            "certificate_configured": Path(CERT_PATH).exists() or bool(CERT_URL),
            "test_message": test_message,
            "response": response,
            "response_length": len(response) if response else 0
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e)
        })

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    return """
    <h1>üåç –ë–æ—Ç –ø–æ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–º –æ—Ç–Ω–æ—à–µ–Ω–∏—è–º —Å GigaChat</h1>
    <p><strong>Status:</strong> ‚úÖ Active</p>
    <p><strong>SSL Certificates:</strong> {}</p>
    <p><strong>GigaChat:</strong> {}</p>
    
    <h3>–¢–µ—Å—Ç—ã:</h3>
    <ul>
        <li><a href="/test_gigachat">–¢–µ—Å—Ç GigaChat</a></li>
        <li><a href="/status">–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</a></li>
    </ul>
    
    <h3>–§—É–Ω–∫—Ü–∏–∏:</h3>
    <ul>
        <li>üéì –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é –≤ –≤—É–∑—ã</li>
        <li>üìö –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ–Ω—è—Ç–∏–π –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π</li>
        <li>üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</li>
        <li>üèõÔ∏è –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏</li>
        <li>üß† –û—Ç–≤–µ—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ GigaChat</li>
    </ul>
    
    <p>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram!</p>
    """.format(
        '‚úÖ Configured' if Path(CERT_PATH).exists() or CERT_URL else '‚ùå Not configured',
        '‚úÖ Configured' if gigachat.is_configured else '‚ùå Not configured'
    )

@app.route('/status')
def status():
    return jsonify({
        "bot_status": "active",
        "gigachat_configured": gigachat.is_configured,
        "certificate_configured": Path(CERT_PATH).exists() or bool(CERT_URL),
        "webhook_set": True
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 10000))
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    print(f"üîê GigaChat: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if gigachat.is_configured else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}")
    print(f"üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã' if Path(CERT_PATH).exists() or CERT_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã'}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    if gigachat.is_configured:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º GigaChat...")
        try:
            test_response = gigachat.get_response("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            print(f"‚úÖ GigaChat —Ç–µ—Å—Ç: {'–£—Å–ø–µ—à–Ω–æ' if '–û—à–∏–±–∫–∞' not in test_response else '–û—à–∏–±–∫–∞'}")
            if '–û—à–∏–±–∫–∞' not in test_response:
                print(f"üìÑ –û—Ç–≤–µ—Ç: {test_response[:100]}...")
        except Exception as e:
            print(f"‚ùå GigaChat —Ç–µ—Å—Ç: {e}")
    
    app.run(host='0.0.0.0', port=port, debug=False)
